name: build

on:
  push:
    branches:
      - main
    paths:
      - "**.toml"
      - "**.rs"
      - ".github/workflows/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: stable-x86
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
            qemu: i386
          - build: stable-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
            qemu: qemu-aarch64
          - build: stable-arm-gnueabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabihf
            strip: arm-linux-musleabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabi
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabi
            strip: arm-linux-musleabi-strip
            qemu: qemu-arm
          - build: stable-powerpc64
            os: ubuntu-latest
            rust: stable
            target: powerpc64-unknown-linux-gnu
            strip: powerpc64-linux-gnu-strip
            qemu: qemu-ppc64
          - build: stable-s390x
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            strip: s390x-linux-gnu-strip
            qemu: qemu-s390x
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-latest
            rust: nightly
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-latest
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: i686-pc-windows-msvc
    env:
      CARGO: cargo
      TARGET_FLAGS:
      TARGET_DIR: ./target
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Use Cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV
      - name: Set Target Variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/cli-wrapper.exe"
          else
            bin="target/${{ matrix.target }}/release/cli-wrapper"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip Release Binary (macos)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: strip "$BIN"

      - name: Strip Release Binary (cross)
        if: env.CARGO == 'cross'
        shell: bash
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.strip }}" \
            "/$BIN"

      - name: Rename Binary
        shell: bash
        run: |
          mkdir artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "$BIN" "artifacts/cli-wrapper-${{ matrix.target }}.exe"
          else
            mv "$BIN" "artifacts/cli-wrapper-${{ matrix.target }}"
          fi

      - name: Upload Artifcat
        uses: actions/upload-artifact@v4
        with:
          name: "cli-wrapper-${{ matrix.target }}"
          path: |
            artifacts/

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Release TAG
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
